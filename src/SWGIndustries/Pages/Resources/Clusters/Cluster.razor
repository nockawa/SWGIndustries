@page "/Resources/Cluster"

@using System.Text
@using SWGIndustries.Components.Resources
@using SWGIndustries.Data
@using SWGIndustries.Services
@using SWGIndustries.Components.GameAccounts
@using SWGIndustries.Components.Buildings.Inventory

@inject ISnackbar Snackbar
@inject InventoryService InventoryService
@inject AdminService AdminService
@inject NavigationManager NavigationManager
@inject ResourceManagerService ResourceManagerService
@inject DefinitionService DefinitionService
@inject IDialogService DialogService

<!--suppress CssUnresolvedCustomProperty -->
<style>
    .mud-table-cell-custom-group {
        font-weight: 500;
    }
    .mud-table-head .mud-table-cell {
        background-color: var(--mud-palette-primary);
    }
    .mud-table-head .mud-table-cell:hover * {
        color: white !important;
    }
    .mud-text-field-focused {
        width: 60%;
    }
    .mud-table-cell-custom-group {
        font-weight: 500;
    }

    .mud-table-cell-custom-group-footer {
        padding-bottom: 50px;
        text-align: right;
    }

    .mud-table-toolbar {
        height: 6rem;
    }
</style>

<MudPaper Elevation="2" Class="ma-2 px-4 pt-0 pb-4">
    <!-- Viewing mode header of the cluster -->
    @if (_editMode == false)
    {
        <div style="display: flex; align-items: center;">
            <h2>@_headerText</h2>
            <MudTooltip Text="Edit the Cluster" openDelay="500" Placement="Placement.Top" Arrow="true">
                <MudIconButton Icon="@Icons.Material.Filled.Edit" Color="Color.Primary" Class="ml-2 my-1" OnClick="OnEdit"/>
            </MudTooltip>
        </div>

        var resource = ResourceManagerService.GetResourceByName(_cluster.Resource.Name);
        var resourceCategory = resource.Category;
        
        <MudText Typo="Typo.body1" Class="my-4">
            @($"This cluster is located on planet {_cluster.Planet.GetFriendlyName()}, harvesting resource {_cluster.Resource.Name} ({resourceCategory.HarvestingResourceType}, {resourceCategory.Name}).")
        </MudText>
        
        <div style="display: flex; align-items: center;" class="mb-4">
            <h3 class="mr-2 mt-1">Waypoint:</h3>
            <code class="mt-1">@($"{_cluster.Waypoint ?? ""}")</code>
            <MudTooltip Text="Show Cluster on map, switch to Edit mode to change" openDelay="500" Placement="Placement.Top" Arrow="true">
                <MudIconButton Icon="@Icons.Material.Filled.ZoomOutMap" Size="Size.Small" Color="Color.Primary" Class="ml-2" OnClick="@(() => DisplayMap(false))"/>
            </MudTooltip>
        </div>
        
        <h3>Comments</h3>
        <pre style="font-family: inherit">@(_cluster.Comments)</pre>
    }
    else
    {
        // Edit mode header of the cluster
        _nameTextField?.Validate();
        <MudForm @bind-IsValid="@_isFormValid">
            <MudTextField @ref="_nameTextField" T="string" Label="Cluster's name" @bind-Value="_editNewName" Variant="Variant.Outlined" AutoFocus="true"
                          Immediate="true" Class="mt-4" Required="true" Validation="@(new Func<string, string>((t) => string.IsNullOrWhiteSpace(t)==false ? null : "Give a valid name"))"/>

            <MudTextField T="string" Label="Comments" @bind-value="@_editNewComment" Variant="Variant.Outlined" Class="mt-4"  Lines="5"/>

            <div style="display: flex; align-items: center;" class="mb-4">
                <h3 class="mr-2 mt-1">Waypoint:</h3>
                <code class="mt-1">@($"{_editNewWaypoint ?? ""}")</code>
                <MudTooltip Text="Show and edit Cluster on map" openDelay="500" Placement="Placement.Top" Arrow="true">
                    <MudIconButton Icon="@Icons.Material.Filled.ZoomOutMap" Size="Size.Small" Color="Color.Primary" Class="ml-2" OnClick="@(() => DisplayMap(true))"/>
                </MudTooltip>
            </div>

            <div style="display: flex; align-items: flex-start;" class="mb-4">
                <MudButton OnClick="OnCancel">Cancel</MudButton>
                <MudButton Variant="Variant.Filled" Color="Color.Primary" Disabled="@(!_isFormValid)" OnClick="OnSave" Class="ml-2">Save</MudButton>
            </div>
        </MudForm>
    }
</MudPaper>

<MudTable T="BuildingEntity" @ref="_table" Items="@_cluster.Buildings" Dense="true" Striped="true" Hover="true"
          Filter="FilterTable" GroupBy="_groupDefinition" Class="ma-2 pa-4">

    <ToolBarContent>
        <MudGrid Class="mb-4">
            <MudItem xs="12" Class="pl-4 pt-4">
                <MudText Typo="Typo.h6">Harvesters for this cluster</MudText>
            </MudItem>
            <MudItem xs="3" Class="pl-4 pt-1">
                <MudSelect T="GroupBy" ValueChanged="OnGroupByChanged" Variant="Variant.Outlined" AdornmentText="Group by"
                           Adornment="Adornment.Start" Dense="true" Class="mx-2">
                    <MudSelectItem T="GroupBy" Value="GroupBy.None">None</MudSelectItem>
                    <MudSelectItem T="GroupBy" Value="GroupBy.GameAccount">Game Account</MudSelectItem>
                    <MudSelectItem T="GroupBy" Value="GroupBy.Character">Character</MudSelectItem>
                </MudSelect>
            </MudItem>
            <MudItem xs="3" Class="pl-4 pt-1">
                <MudTextField @bind-Value="_searchString" Placeholder="Search" Variant="Variant.Outlined" Adornment="Adornment.Start"
                              AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium"
                              @onfocus="() => _isFocused = true" @onblur="() => _isFocused = false"
                              Class="@(_isFocused ? "mud-text-field-focused" : "")"/>
            </MudItem>
        </MudGrid>
    </ToolBarContent>
    
    <ColGroup>
        <!-- Grouping level -->
        @if (IsGroupByGameAccount || IsGroupByCharacter)
        {
            <col style="width: 4rem"/>
        }

        <col style="width: 14rem"/>

        <!-- Game Account -->
        @if (!IsGroupByGameAccount && !IsGroupByCharacter)
        {
            <col style="width: 12rem"/>
        }

        <!-- Character -->
        @if (!IsGroupByCharacter)
        {
            <col style="width: 10rem"/>
        }

        <!-- Class -->
        <col style="width: 12rem"/>

        <!-- Status -->
        <col style="width: 20rem"/>
    </ColGroup>
    
    <HeaderContent>
        <!-- Name -->
        <MudTh Style="color: var(--mud-palette-primary-text)">
            <MudTableSortLabel SortBy="new Func<BuildingEntity, object>(b => b.Name)">Name</MudTableSortLabel>
        </MudTh>

        <!-- Game Account -->
        @if (!IsGroupByGameAccount && !IsGroupByCharacter)
        {
            <MudTh Style="color: var(--mud-palette-primary-text)">
                <MudTableSortLabel SortBy="new Func<BuildingEntity, object>(b => b.Owner.Name)">Game Account</MudTableSortLabel>
            </MudTh>
        }

        <!-- Character -->
        @if (!IsGroupByCharacter)
        {
            <MudTh Style="color: var(--mud-palette-primary-text)">
                <MudTableSortLabel SortBy="new Func<BuildingEntity, object>(b => b.PutDownBy.Name)">Character</MudTableSortLabel>
            </MudTh>
        }

        <!-- Class -->
        <MudTh Style="color: var(--mud-palette-primary-text)">Class</MudTh>

        <!-- Status -->
        <MudTh Style="color: var(--mud-palette-primary-text)">Status</MudTh>

    </HeaderContent>

    <GroupHeaderTemplate>
        <MudTh Class="mud-table-cell-custom-group" colspan="4">@($"{context.GroupName}: {context.Key}")</MudTh>
    </GroupHeaderTemplate>

    <GroupFooterTemplate>
        <MudTh Class="mud-table-cell-custom-group mud-table-cell-custom-group-footer" colspan="4">
            @($"Count: {context.Items.Count()}")
        </MudTh>
    </GroupFooterTemplate>

    <RowTemplate>
        <!-- Name -->
        <MudTd DataLabel="Owner">@context.Name</MudTd>

        <!-- Game Account -->
        @if (!IsGroupByGameAccount && !IsGroupByCharacter)
        {
            <MudTd DataLabel="Owner">@context.Owner.Name</MudTd>
        }

        <!-- Character -->
        @if (!IsGroupByCharacter)
        {
            <MudTd DataLabel="Type">@context.PutDownBy.Name</MudTd>
        }
        <MudTd DataLabel="Class">@(DefinitionService.GetNodeByClass<IStructureNode>(context.FullClass).Class)</MudTd>

        <MudTd DataLabel="Status"><HarvesterStatus Harvester="@context"/></MudTd>
    </RowTemplate>
</MudTable>

<MudPaper Elevation="2" Class="ma-2 mt-8 px-4 pt-4">
    <MudTooltip Text="Add harvesters to the cluster" openDelay="500" Placement="Placement.Top" Arrow="true">
        <MudFab Class="mb-4" Size="Size.Small" Color="@(_toggleAddHarvester ? Color.Primary : Color.Secondary)" EndIcon="@Icons.Material.Filled.Add" Label="Add harvesters" OnClick="ToggleAddHarvesters"/>
    </MudTooltip>

    @if (_toggleAddHarvester)
    {
        <MudText Class="mb-4">
            Select one or many harvesters to add to the cluster, which character will put them down, set the average concentration, you can also change their maintenance and power.
        </MudText>
        
        <div class="my-8" style="display: flex; justify-content: stretch; align-items: start;">
            <CharacterSelectionControl Class="mr-8" Style="width: 100%" SelectedGameAccountChanged="OnGameAccountSelectionChanged" SelectedCharacterChanged="OnCharacterSelectionChanged"/>
    
            <div style="width: 100%">
                <MudText Typo="Typo.body1" Class="mb-4">@($"Average concentration of the resource {_clusterResourceConcentration}")</MudText>
                <MudSlider T="int" Min="0" Max="100" Step="1" Value="@_clusterResourceConcentration" ValueChanged="ClusterResourceConcentrationChanged" Class="mb-4"/>
                
                <MudText Typo="Typo.body1" Class="mb-4">Override maintenance and power amount</MudText>
                <div style="display: flex; justify-content: stretch; align-items: start">
                    <MudSwitch @bind-Value="_overrideMaintenance" Class="mr-4" Style="width: 14rem" T="bool" Color="Color.Primary" Label="Override maintenance" LabelPlacement="Placement.Left"/>
                    <MudNumericField Disabled="@(_overrideMaintenance==false)" T="int" Step="1000" Label="Maintenance amount" @bind-Value="_setHarvesterMaintenance" Class="mb-4"/>
                </div>
                <div style="display: flex; justify-content: stretch; align-items: start">
                    <MudSwitch @bind-Value="_overridePower" Class="mr-4" T="bool" Style="width: 14rem" Color="Color.Primary" Label="Override power" LabelPlacement="Placement.Left"/>
                    <MudNumericField Disabled="@(_overridePower==false)" T="int" Step="1000" Label="Power amount" @bind-Value="_setHarvesterPower"/>
                </div>
            </div>
        </div>        
        
        <MudTable T="BuildingEntity" Items="_availableHarvester" MultiSelection="true" Hover="true" Dense="true" Striped="true" SelectedItemsChanged="OnSelectedItemsChanged">
            <ColGroup>
                <!-- Checkbox -->
                <col style="width: 4rem"/>

                <!-- Class -->
                <col style="width: 12rem"/>

                <!-- Owner -->
                <col style="width: 10rem"/>

                <!-- Name -->
                <col style="width: 16rem"/>
                
                <!-- BER -->
                <col style="width: 4rem"/>

                <!-- Hopper Size -->
                <col style="width: 8rem"/>

                <!-- Maintenance amount -->
                <col style="width: 8rem"/>

                <!-- Power amount -->
                <col style="width: 8rem"/>

                <!-- Comments -->
                <col/>
            </ColGroup>
            
            <HeaderContent>
                <MudTh Style="color: var(--mud-palette-primary-text)">
                    <MudTableSortLabel SortBy="new Func<BuildingEntity, object>(b => b.FullClass)">Class</MudTableSortLabel>
                </MudTh>
                <MudTh Style="color: var(--mud-palette-primary-text)">
                    <MudTableSortLabel SortBy="new Func<BuildingEntity, object>(b => b.Owner.Name)">Owner</MudTableSortLabel>
                </MudTh>
                <MudTh Style="color: var(--mud-palette-primary-text)">
                    <MudTableSortLabel SortBy="new Func<BuildingEntity, object>(b => b.Name)">Name</MudTableSortLabel>
                </MudTh>
                <MudTh Style="color: var(--mud-palette-primary-text)">
                    <MudTableSortLabel SortBy="new Func<BuildingEntity, object>(b => b.HarvesterBER)">BER</MudTableSortLabel>
                </MudTh>
                <MudTh Style="color: var(--mud-palette-primary-text)">
                    <MudTableSortLabel SortBy="new Func<BuildingEntity, object>(b => b.HarvesterHopperSize)">Hopper Size</MudTableSortLabel>
                </MudTh>
                <MudTh Style="color: var(--mud-palette-primary-text)">
                    <MudTableSortLabel SortBy="new Func<BuildingEntity, object>(b => b.MaintenanceAmount)">Maintenance</MudTableSortLabel>
                </MudTh>
                <MudTh Style="color: var(--mud-palette-primary-text)">
                    <MudTableSortLabel SortBy="new Func<BuildingEntity, object>(b => b.PowerAmount)">Power</MudTableSortLabel>
                </MudTh>
                <MudTh Style="color: var(--mud-palette-primary-text)">Comments</MudTh>
            </HeaderContent>
            
            <RowTemplate>
                <MudTd DataLabel="Class">@(DefinitionService.GetNodeByClass<IStructureNode>(context.FullClass).Class)</MudTd>
                <MudTd DataLabel="Owner">@context.Owner.Name</MudTd>
                <MudTd DataLabel="Name">@context.Name</MudTd>
                <MudTd DataLabel="BER">@context.HarvesterBER</MudTd>
                <MudTd DataLabel="Hopper Size">@($"{context.HarvesterHopperSize}K")</MudTd>
                <MudTd DataLabel="Maintenance">@context.MaintenanceAmount</MudTd>
                <MudTd DataLabel="Power">@context.PowerAmount</MudTd>
                <MudTd DataLabel="Comments">@context.Comments</MudTd>
            </RowTemplate>

        </MudTable>
        
        <MudText Typo="Typo.body1" Class="mt-4">@_selectionRecap</MudText>
        @if (_canPutDown == false)
        {
            <MudText Typo="Typo.body1" Color="Color.Error" Class="my-2">@_canPutDownError</MudText>
        }
        
        <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="PutDownSelectedHarvesters" Class="my-4" Disabled="@(_canPutDown==false)">Put Down</MudButton>
    }
</MudPaper>

@code {
    private enum GroupBy
    {
        None,
        GameAccount,
        Character,
    }

    [Parameter] [SupplyParameterFromQuery(Name = "id")] public int Id { get; set; }

    private ClusterEntity _cluster;
    private string _headerText;
    
    private MudTextField<string> _nameTextField;
    private bool _editMode;
    private bool _isFormValid;
    private string _editNewName;
    private string _editNewComment;
    private string _editNewWaypoint;
    
    private MudTable<BuildingEntity> _table;
    private string _searchString;
    private TableGroupDefinition<BuildingEntity> _groupDefinition;
    private bool _isFocused;
    private GroupBy _groupBy;

    private bool IsGroupByGameAccount => _groupBy == GroupBy.GameAccount;
    private bool IsGroupByCharacter => _groupBy == GroupBy.Character;

    private bool _toggleAddHarvester;
    private bool _canPutDown;
    private IList<BuildingEntity> _availableHarvester;
    private string _selectionRecap;
    private HashSet<BuildingEntity> _selectedHarvesters;
    private GameAccountEntity _selectedGameAccount;
    private CharacterEntity _selectedCharacter;
    private int _clusterResourceConcentration;
    private bool _overrideMaintenance;
    private bool _overridePower;
    private int _setHarvesterMaintenance;
    private int _setHarvesterPower;
    private bool _lotRequirementMet;
    private string _canPutDownError;

    private void OnGroupByChanged(GroupBy groupBy)
    {
        _groupBy = groupBy;
        switch (groupBy)
        {
            case GroupBy.None:
                _groupDefinition = null;
                break;
            case GroupBy.GameAccount:
                _groupDefinition = new TableGroupDefinition<BuildingEntity>
                {
                    GroupName = "Game Account",
                    Indentation = true,
                    Expandable = true,
                    Selector = e => e.Owner.Name,
                };
                break;
            case GroupBy.Character:
                _groupDefinition = new TableGroupDefinition<BuildingEntity>
                {
                    GroupName = "Game Account",
                    Indentation = true,
                    Expandable = true,
                    Selector = e => e.Owner.Name,
                    InnerGroup = new TableGroupDefinition<BuildingEntity>
                    {
                        GroupName = "Character",
                        Indentation = true,
                        Expandable = true,
                        Selector = e => e.PutDownBy.Name,
                    }

                };
                break;
        }
        StateHasChanged();
    }

    private void OnEdit()
    {
        _editNewName = _cluster.Name;
        _editNewComment = _cluster.Comments;
        _editNewWaypoint = _cluster.Waypoint;
        _editMode = true;
        StateHasChanged();
    }
    
    private void OnCancel()
    {
        _editMode = false;
        StateHasChanged();
    }

    private void OnSave()
    {
        _cluster.Name = _editNewName;
        _cluster.Comments = _editNewComment;
        _cluster.Waypoint = _editNewWaypoint;
        InventoryService.UpdateCluster(_cluster);
        InventoryService.SaveChanges(null);
        _editMode = false;
        StateHasChanged();
    }

    protected override async Task OnParametersSetAsync()
    {
        var appAccount = await AdminService.GetAppAccountAsync();
        var cluster = await InventoryService.GetCluster(Id);
        
        // Check if the cluster belongs to the app account (it's easy to navigate with a tampered URL)
        if ((cluster != null) &&
            ((cluster.GameAccount != null && appAccount.GameAccounts.Contains(cluster.GameAccount)) ||
            (cluster.Crew != null && appAccount.Crew == cluster.Crew)))
        {
            _cluster = cluster;
            if (_cluster != null)
            {
                var crew = _cluster.Crew != null ? $" (from crew '{_cluster.Crew.Name}')" : string.Empty;
                _headerText = $"Cluster {_cluster.Name}{crew}";
                EvalCanPutDown();
            }
            else
            {
                _headerText = "Loading...";
            }
        }
        else
        {
            NavigationManager.NavigateTo("/Unauthorized", true);
        }
    }

    private async Task DisplayMap(bool allowEdit)
    {
        var options = new DialogOptions()
        {
            BackdropClick = false,
            CloseButton = false,
        };
        
        var parameters = new DialogParameters<ShowMapDialog>
        {
            { x => x.WaypointAsString, _cluster.Waypoint },
            { x => x.AllowEdit, allowEdit }
        };

        var title = $"Waypoint for cluster {_cluster.Name}";
        var dialogRef = await DialogService.ShowAsync<ShowMapDialog>(title, parameters, options);
        var result = await dialogRef.Result;

        if (result == null || result.Canceled)
        {
            return;
        }

        var dialog = (ShowMapDialog)dialogRef.Dialog!;
        
        // Fetch changes
        _editNewWaypoint = dialog.WaypointAsString;
        if (Waypoint.TryParse(_editNewWaypoint, out var wp))
        {
            _cluster.Planet = wp.Planet;
        }
    }
    
    private bool FilterTable(BuildingEntity building)
    {
        if (string.IsNullOrWhiteSpace(_searchString))
        {
            return true;
        }
        return (building.Name.Contains(_searchString, StringComparison.OrdinalIgnoreCase)) ||
               (building.Owner.Name.Contains(_searchString, StringComparison.OrdinalIgnoreCase)) ||
               (building.Comments != null && building.Comments.Contains(_searchString, StringComparison.OrdinalIgnoreCase));
    }

    private async Task ToggleAddHarvesters()
    {
        _toggleAddHarvester = !_toggleAddHarvester;
        if (_toggleAddHarvester == false)
        {
            _selectedCharacter = null;
            _selectedHarvesters.Clear();
            _selectionRecap = null;
            return;
        }

        await RefreshHarvesterList();
        EvalCanPutDown();
    }

    private async Task RefreshHarvesterList()
    {
        var hrt =ResourceManagerService.GetResourceByName(_cluster.Resource.Name).Category.HarvestingResourceType;
        _availableHarvester = await InventoryService.GetAvailableHarvesters(_selectedGameAccount, hrt);
    }

    private void OnSelectedItemsChanged(HashSet<BuildingEntity> selection)
    {
        _selectedHarvesters = selection;
        var lotNeeded = 0;        
        var sb = new StringBuilder($"Selected {selection.Count} harvesters");
        foreach (var h in selection)
        {
            lotNeeded += DefinitionService.GetNodeByClass<StructureNode>(h.FullClass).LotTaken;
            //sb.AppendLine($", {h.Name}");
        }

        if (_selectedCharacter != null)
        {
            var lotTaken = _selectedCharacter.PutDownBuildings
                .Where(b => b.BuildingForCrew == (_cluster.Crew!=null))
                .Sum(b => DefinitionService.GetNodeByClass<StructureNode>(b.FullClass).LotTaken);
            var lotFree = (_cluster.Crew != null) ? (_selectedCharacter.MaxLotsForCrew - lotTaken) : (10 - lotTaken);

            sb.AppendLine($", needs {lotNeeded} lots out of {lotFree} lot available.");
            _lotRequirementMet = lotNeeded <= lotFree;
        }
        else
        {
            _lotRequirementMet = false;
        }
        _selectionRecap = sb.ToString();
        EvalCanPutDown();
    }

    private void ClusterResourceConcentrationChanged(int concentration)
    {
        _clusterResourceConcentration = concentration;
        EvalCanPutDown();
    }

    private void EvalCanPutDown()
    {
        _canPutDown = true;
        var sb = new StringBuilder();

        if (_selectedHarvesters?.Count == 0)
        {
            _canPutDown = false;
            sb.Append("Must select at least one harvester.");
        }

        if (_selectedCharacter == null)
        {
            if (_canPutDown == false) sb.Append(" ");
            else _canPutDown = false;
            
            sb.Append("Must select a character.");
        }

        if (_clusterResourceConcentration == 0)
        {
            if (_canPutDown == false) sb.Append(" ");
            else _canPutDown = false;
            
            sb.Append("Concentration must be set.");
        }

        if (_lotRequirementMet == false)
        {
            if (_canPutDown == false) sb.Append(" ");
            else _canPutDown = false;
            
            sb.Append("You do not respect lot requirements.");
        }

        _canPutDownError = sb.ToString();
    }

    private async Task OnGameAccountSelectionChanged(GameAccountEntity gameAccount)
    {
        _selectedGameAccount = gameAccount;
        await RefreshHarvesterList();
    }

    private void OnCharacterSelectionChanged(CharacterEntity character)
    {
        _selectedCharacter = character;
        OnSelectedItemsChanged(_selectedHarvesters);
    }

    private async Task PutDownSelectedHarvesters()
    {
        var time = DateTime.UtcNow;
        var trans = InventoryService.BeginTransaction();

        try
        {
            // Loop through all selected harvesters
            foreach (var harvester in _selectedHarvesters)
            {
                // Set concentration
                harvester.ResourceConcentration = _clusterResourceConcentration;
                
                // Override maintenance if needed
                if (_overrideMaintenance)
                {
                    harvester.MaintenanceAmount = _setHarvesterMaintenance;
                    harvester.MaintenanceLastUpdate = time;
                }
                
                // Override power if needed
                if (_overridePower)
                {
                    harvester.PowerAmount = _setHarvesterPower;
                    harvester.PowerLastUpdate = time;
                }
                
                // Put down the building
                await InventoryService.PutDownBuilding(harvester, _selectedCharacter, _cluster.Crew != null, _cluster.Planet, _cluster);
                
                // Start the harvester
                InventoryService.StartHarvester(harvester, time);
            }

            if (InventoryService.SaveChanges(trans))
            {
                Snackbar.Add($"Put down and started {_selectedHarvesters.Count} successfully.", Severity.Success);
            }
            else
            {
                Snackbar.Add($"Failed to put down and/or start the {_selectedHarvesters.Count} selected harvesters.", Severity.Error);
            }
        }
        catch(Exception e)
        {
            // TODO LOG ERROR
            Snackbar.Add($"Failed to put down and/or start the {_selectedHarvesters.Count} selected harvesters. {e.Message}", Severity.Error);
            await trans.RollbackAsync();
        }

        await ToggleAddHarvesters();
    }
}