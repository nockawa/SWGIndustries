@page "/Admin/Crew"
@using MudBlazor
@using SWGIndustries.Components.Crew
@using SWGIndustries.Data
@using SWGIndustries.Services

@inject ISnackbar Snackbar
@inject AdminService AdminService

<!-- Not in crew info: everything to join a crew -->
@if (_crewType == CrewType.NotInCrew)
{
    if (_answeredCrewRequest != null)
    {
        <MudAlert Class="ma-4 pa-4" Severity="Severity.Error" ContentAlignment="HorizontalAlignment.Left" ShowCloseIcon="true" 
                  CloseIconClicked="async () => await CloseAnsweredCrewRequest()">
            @($"Crew leader {_answeredCrewRequest.ToAccount.Name} has rejected your request.")
        </MudAlert>
    }

    // Display pending request, if any
    if (_pendingCrewRequests!=null && _pendingCrewRequests.Count>0)
    {
        <MemberPendingCrewRequests PendingRequests="_pendingCrewRequests" 
                                   OnDeleteSentInvitationRequest="@(async void (invitation) => await DeleteSentInvitationRequest(invitation))"
                                   OnRequestToJoinCrew="@(async void (invitation, grandOrDeny) => await ProcessRequestToJoinCrew(invitation, grandOrDeny))"/>
    }

    <!-- Display the forms to create or join a crew -->
    <CreateOrJoinCrew 
        Crew="_crew" 
        HasAnyRequests="@((_pendingCrewRequests!=null && _pendingCrewRequests.Any()) || _answeredCrewRequest != null)"
        OnRequestToJoinCrew="@(async void (_) => { await UpdateCrewState(); })"
        OnCrewCreated="@(async void (crew) => { _crew = crew; await UpdateCrewState(); })" />
}
else
{
    // Header of the page
    if (_crewType == CrewType.Leader)
    {
        <MudText Typo="Typo.h4" Class="mb-4">You are the leader of the crew: <b>@_crew.Name</b></MudText>
    }
    else
    {
        <MudText Typo="Typo.h4" Class="mb-4">You are member of the crew: <b>@_crew.Name</b></MudText>
    }
    
    // Leader specific pane
    if (_crewType == CrewType.Leader)
    {
        <LeaderCrewList @ref="_leaderCrewList" Crew="_crew" 
                        OnCrewListChanged="@(async void () =>
                                           {
                                               await _leaderCrewList?.RefreshCrewList();
                                               await _memberCharacterList.RefreshCharacters();
                                           })"/> 
                                
        <CrewLeaderPane Crew="_crew"/>
    }

    // Member specific pane
    else if (_crewType == CrewType.Member)
    {
        if (_answeredCrewRequest != null)
        {
            <MudAlert Class="ma-4 pa-4" Severity="Severity.Success" ContentAlignment="HorizontalAlignment.Left" ShowCloseIcon="true" 
                      CloseIconClicked="async () => await CloseAnsweredCrewRequest()">
                @($"Crew leader {_answeredCrewRequest.ToAccount.Name} has granted your request to join the crew {_answeredCrewRequest.FromAccount.Crew.Name}.")
            </MudAlert>
        }
        
    }

    // Member and Leader common pane
    <MemberCharacterList @ref="_memberCharacterList" AppAccount="_appAccount" 
                         OnCrewListChanged="@(async void () =>
                                            {
                                                if (_leaderCrewList != null)
                                                {
                                                    await _leaderCrewList.RefreshCrewList();
                                                }
                                            })"/>
}

@code {

    private enum CrewType
    {
        NotInCrew,
        Member,
        Leader
    }

    private AppAccountEntity _appAccount;
    private CrewType _crewType;
    private CrewEntity _crew;

    private LeaderCrewList _leaderCrewList;
    private MemberCharacterList _memberCharacterList;

    private IList<CrewInvitationEntity> _pendingCrewRequests;
    private CrewInvitationEntity _answeredCrewRequest;

    protected override async Task OnInitializedAsync()
    {
        _appAccount = await AdminService.GetAppAccountAsync();
        //await DataAccessService.DbContext.Entry(_appAccount).Reference(a => a.Crew).LoadAsync(); TODO shouldn't be needed anymore
        _crew = _appAccount.Crew;
        await UpdateCrewState();
    }

    private async Task UpdateCrewState()
    {
        _pendingCrewRequests = await AdminService.GetPendingCrewRequests(_appAccount);
        _answeredCrewRequest = await AdminService.GetAnsweredCrewRequest();
        if (_crew == null)
        {
            _crewType = CrewType.NotInCrew;
        }
        else if (_crew.CrewLeader == _appAccount)
        {
            _crewType = CrewType.Leader;
        }
        else
        {
            _crewType = CrewType.Member;
        }

        StateHasChanged();
    }

    private async Task DeleteSentInvitationRequest(CrewInvitationEntity invitation)
    {
        if (await AdminService.DeleteCrewInvitation(invitation))
        {
            Snackbar.Add("Request deleted.", Severity.Success);
            await UpdateCrewState();
        }
        else
        {
            Snackbar.Add($"Failed to delete request.", Severity.Error);
        }
    }

    private async Task ProcessRequestToJoinCrew(CrewInvitationEntity invitation, bool grantOrDeny)
    {
        var (res, info) = await AdminService.ProcessInvitationToJoinCrew(invitation, grantOrDeny);
        if (res)
        {
            Snackbar.Add(info, Severity.Success);
            await UpdateCrewState();
        }
        else
        {
            Snackbar.Add(info, Severity.Error);
        }
    }

    private async Task CloseAnsweredCrewRequest()
    {
        await AdminService.CloseCrewInvitation(_answeredCrewRequest);
        await UpdateCrewState();
    }

}