@using SWGIndustries.Data
@using SWGIndustries.Services

@inject AdminService AdminService
@inject ISnackbar Snackbar

<MudPaper Class="pa-4" Style="width: 50%" MinWidth="50%">
    <MudText Typo="Typo.h6">Add a new SWG Character</MudText>
    <MudForm @ref="_characterForm" @bind-IsValid="@_formSuccess" Model="@_newCharacter">
        <MudTextField T="string" Label="Name" Required="true" AutoFocus="true" Immediate="true" DebounceInterval="100"
                      Validation="@(new Func<string, string>(ValidateCharacterName))" @bind-Value="@_newCharacter.Name"></MudTextField>
        <div class="d-flex justify-end mt-4">
            <MudButton Variant="Variant.Filled" Color="Color.Secondary" Class="mr-2"
                       OnClick="@(() => OnCharacterAdded?.Invoke(null))">Cancel</MudButton>
            <MudButton Variant="Variant.Filled" Color="Color.Primary" Disabled="@(!_formSuccess)"
                       OnClick="@(() => CreateCharacter(AddCharacterFor))">Create</MudButton>
        </div>
    </MudForm>
</MudPaper>

@code {
    
    [Parameter] 
    public GameAccountEntity AddCharacterFor { get; set; }
    
    [Parameter] 
    public Action<CharacterEntity> OnCharacterAdded { get; set; }

    private CharacterEntity _newCharacter = new();
    private MudForm _characterForm;
    private bool _formSuccess;
 
    private string ValidateCharacterName(string name)
    {
        if (string.IsNullOrWhiteSpace(name))
        {
            return "Name is required.";
        }

        if (AddCharacterFor.Characters.Any(c => c.Name == name))
        {
            return "Name already exists.";
        }
            
        return null;
    }

    private async Task CreateCharacter(GameAccountEntity account)
    {
        if (await AdminService.AddCharacter(account, _newCharacter, true))
        {
            Snackbar.Add($"Character '{_newCharacter.Name}' added successfully.", Severity.Success);
        }
        else
        {
            Snackbar.Add("Failed to add Character.", Severity.Error);
        }
        OnCharacterAdded?.Invoke(_newCharacter);
        _newCharacter = new CharacterEntity();
    }
}