@page "/Resources"
@using System.Drawing
@using System.Text
@using SWGIndustries.Data
@using SWGIndustries.Services
@using Color = System.Drawing.Color
@using Size = MudBlazor.Size

@inject ResourceManagerService ResourceManagerService

<style>
    .small-text *  {
        font-size: 0.9rem; /* Adjust the size as needed */
    }

    .small-text .mud-treeview-item * {
        font-size: 0.9rem; /* Ensure child items also have smaller text */
    }
    
    .mud-table-row * {
        padding-left: 2px !important;
        padding-right: 2px !important;
        padding-inline-start: 2px !important;
        padding-inline-end: 2px !important;
    }
    .mud-sort-index.mud-text-disabled {
        display: none !important;
    }

    .column-options.cursor-pointer{
        display: none !important;
    }
</style>

<MudToolBar Style="padding-left: 16px">
    <MudTooltip Text="@(_categoriesOpen ? "Collapse categories" : "Expand categories")" 
                openDelay="500" Placement="Placement.Top" Arrow="true">
        <MudIconButton Size="Size.Medium" Icon="@(_categoriesOpen ? 
                        Icons.Material.Outlined.KeyboardDoubleArrowLeft : 
                        Icons.Material.Outlined.KeyboardDoubleArrowRight)"
                       Variant="Variant.Outlined"
                       OnClick="@(() => { _categoriesOpen = !_categoriesOpen; })"/>
    </MudTooltip>
</MudToolBar>

<MudStack Justify="Justify.FlexStart" Row="true">
    <div style="width: 20rem; @( _categoriesOpen ? "" : "display: none;")">
        <MudTextField T="string" Label="Search" Adornment="Adornment.Start" Class="mx-4"
                      AdornmentIcon="@Icons.Material.Filled.Search"
                      OnDebounceIntervalElapsed="OnTreeFilterTextChanged" DebounceInterval="500" Clearable="true"/>
        <MudTreeView  Class="small-text mb-4" T="ResourceCategory" @ref="_resourceCategoriesTree" Items="_root" Dense="true"
                      Hover="true" AutoExpand="true" ExpandOnDoubleClick="true" FilterFunc="ResourceCategoriesTreeFilterFunc"
                      SelectedValueChanged="ResourceCategoryChanged"
                      >
            <ItemTemplate>
                <MudTreeViewItem T="ResourceCategory" @bind-Expanded="@context.Expanded" Value="@context.Value"
                                 Text="@($"{context.Value?.Name} ({context.Value?.Resources.Count})")" Items="@context.Children" Visible="@context.Visible"/>
            </ItemTemplate>
        </MudTreeView>
    </div>
    <div>
        <MudDataGrid T="Resource" Items="_resources" Dense="true" Hover="true" Square="true" Striped="true" QuickFilter="ResourceQuickFilter">
            <ToolBarContent>
                <MudText Typo="Typo.h6" Class="mt-4 mr-8">Resources</MudText>
                <MudTextField @bind-Value="_searchString" Placeholder="Search" Adornment="Adornment.Start" Immediate="true"
                              AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-4 mr-4" Style="max-width: 30rem"/>
                <MudSelect @ref="_planetFilter" T="Planet" Style="max-width: 30rem; margin-left: auto" Label="Planets" MultiSelection="true"
                           SelectAll="true" SelectAllText="All Planets" SelectedValuesChanged="OnSelectPlanetsChanged" 
                           MultiSelectionTextFunc="MultiSelectPlanets">
                    @foreach(var planet in Enum.GetValues(typeof(Planet)).Cast<Planet>())
                    {
                        if (planet == Planet.Undefined)
                        {
                            continue;
                        }
                        <MudSelectItem T="Planet" Value="@(planet)">
                            <MudStack Row="true">
                                <MudText>@planet.ToString()</MudText>
                            </MudStack>
                        </MudSelectItem>
                    }
                </MudSelect>
            </ToolBarContent>
            <ColGroup>
                <col style="width: 10rem;"/>
                <col style="width: 15rem;"/>
                <col style="width: 10rem;"/>
                <col style="width: 40px;"/>
                <col style="width: 40px;"/>
                <col style="width: 40px;"/>
                <col style="width: 40px;"/>
                <col style="width: 40px;"/>
                <col style="width: 40px;"/>
                <col style="width: 40px;"/>
                <col style="width: 40px;"/>
                <col style="width: 40px;"/>
                <col style="width: 40px;"/>
                <col style="width: 40px;"/>
                <col style="width: 40px;"/>
            </ColGroup>
            <Columns>
                <PropertyColumn T="Resource" TProperty="string" Property="@(x => x.Name)" Title="Name"/>
                <PropertyColumn T="Resource" TProperty="string" Property="@(x => x.Category.Name)" Title="Category"/>
                <TemplateColumn T="Resource" CellClass="d=flex justify-end" Title="Planets">
                    <CellTemplate>
                        <MudStack Row="true" Spacing="0">
                            @foreach(var planet in Enum.GetValues(typeof(Planet)).Cast<Planet>())
                            {
                                if (planet == Planet.Undefined)
                                {
                                    continue;
                                }
                                if (context.Item.Planets.HasFlag(planet))
                                {
                                    <MudTooltip Text="@planet.ToString()" openDelay="500" Placement="Placement.Top" Arrow="true">
                                        <MudAvatar Style="@(GetPlanetStyle(planet))">@planet.ToString()[..1]</MudAvatar>
                                    </MudTooltip>
                                }
                            }
                        </MudStack>
                    </CellTemplate>
                </TemplateColumn>
                <PropertyColumn T="Resource" TProperty="string" Property="@(x => AgeText(x))" SortBy="SortBy" Title="Age" Editable="false" Filterable="false" ShowColumnOptions="false" CellStyleFunc="CellDuration"/>
                <PropertyColumn T="Resource" TProperty="ushort?" Property="@(x => x.CR>0 ? x.CR : null)" Title="CR" Editable="false" Filterable="false" ShowColumnOptions="false" CellStyleFunc="r => ColorStat(r, r.CR)"/>
                <PropertyColumn T="Resource" TProperty="ushort?" Property="@(x => x.CD>0 ? x.CD : null)" Title="CD" Editable="false" Filterable="false" ShowColumnOptions="false" CellStyleFunc="r => ColorStat(r, r.CD)"/>
                <PropertyColumn T="Resource" TProperty="ushort?" Property="@(x => x.DR>0 ? x.DR : null)" Title="DR" Editable="false" Filterable="false" ShowColumnOptions="false" CellStyleFunc="r => ColorStat(r, r.DR)"/>
                <PropertyColumn T="Resource" TProperty="ushort?" Property="@(x => x.ER>0 ? x.ER : null)" Title="ER" Editable="false" Filterable="false" ShowColumnOptions="false" CellStyleFunc="r => ColorStat(r, r.ER)"/>
                <PropertyColumn T="Resource" TProperty="ushort?" Property="@(x => x.FL>0 ? x.FL : null)" Title="FL" Editable="false" Filterable="false" ShowColumnOptions="false" CellStyleFunc="r => ColorStat(r, r.FL)"/>
                <PropertyColumn T="Resource" TProperty="ushort?" Property="@(x => x.HR>0 ? x.HR : null)" Title="HR" Editable="false" Filterable="false" ShowColumnOptions="false" CellStyleFunc="r => ColorStat(r, r.HR)"/>
                <PropertyColumn T="Resource" TProperty="ushort?" Property="@(x => x.MA>0 ? x.MA : null)" Title="MA" Editable="false" Filterable="false" ShowColumnOptions="false" CellStyleFunc="r => ColorStat(r, r.MA)"/>
                <PropertyColumn T="Resource" TProperty="ushort?" Property="@(x => x.OQ>0 ? x.OQ : null)" Title="OQ" Editable="false" Filterable="false" ShowColumnOptions="false" CellStyleFunc="r => ColorStat(r, r.OQ)"/>
                <PropertyColumn T="Resource" TProperty="ushort?" Property="@(x => x.PE>0 ? x.PE : null)" Title="PE" Editable="false" Filterable="false" ShowColumnOptions="false" CellStyleFunc="r => ColorStat(r, r.PE)"/>
                <PropertyColumn T="Resource" TProperty="ushort?" Property="@(x => x.SR>0 ? x.SR : null)" Title="SR" Editable="false" Filterable="false" ShowColumnOptions="false" CellStyleFunc="r => ColorStat(r, r.SR)"/>
                <PropertyColumn T="Resource" TProperty="ushort?" Property="@(x => x.UT>0 ? x.UT : null)" Title="UT" Editable="false" Filterable="false" ShowColumnOptions="false" CellStyleFunc="r => ColorStat(r, r.UT)"/>
            </Columns>
            <PagerContent>
                <MudDataGridPager T="Resource" PageSizeOptions="new []{25, 50, 100}"/>
            </PagerContent>
        </MudDataGrid>
    </div>
</MudStack>

@code {
    [CascadingParameter] protected MudThemeProvider ThemeProvider { get; set; }
    
    private MudTreeView<ResourceCategory> _resourceCategoriesTree;
    private IReadOnlyList<TreeItemData<ResourceCategory>> _root;
    private string _treeFilterSearchPhrase;
    private bool _categoriesOpen = true;
    private ResourceCategory _selectedResourceCategory;
    private List<Resource> _resources;
    private Planet _selectedPlanets;
    private string _searchString;
    private MudSelect<Planet> _planetFilter;

    protected override void OnInitialized()
    {
        var rootList = new List<TreeItemData<ResourceCategory>>();
        var rootItem = new TreeItemData<ResourceCategory> { Value = ResourceManagerService.RootCategory };
        LoadSubCategories(rootItem);
        rootList.Add(rootItem);
        _root = rootList;
        OnSelectPlanetsChanged([]);
    }

    private void LoadSubCategories(TreeItemData<ResourceCategory> item)
    {
        var rc = item.Value!;
        item.Children = new List<TreeItemData<ResourceCategory>>(rc.SubCategories.Count);
        foreach (var subCategory in rc.SubCategories)
        {
            var subItem = new TreeItemData<ResourceCategory>
            {
                Value = subCategory,
                Expandable = subCategory.SubCategories.Any()
            };
            item.Children.Add(subItem);
            LoadSubCategories(subItem);
        }
    }

   private async Task OnTreeFilterTextChanged(string searchPhrase)
    {
        _treeFilterSearchPhrase = searchPhrase;
        await _resourceCategoriesTree.FilterAsync();
    }

    private Task<bool> ResourceCategoriesTreeFilterFunc(TreeItemData<ResourceCategory> item)
    {
        var itemName = item.Value.Name;
        if (string.IsNullOrEmpty(itemName))
        {
            return Task.FromResult(false);
        }

        return Task.FromResult(itemName.Contains(_treeFilterSearchPhrase, StringComparison.OrdinalIgnoreCase));
    }

    private void ResourceCategoryChanged(ResourceCategory category)
    {
        _selectedResourceCategory = category;
        UpdateResources();
    }

    private void UpdateResources()
    {
        if (_selectedResourceCategory == null)
        {
            return;
        }
        _resources = _selectedResourceCategory.Resources.Where(r => (r.Planets & _selectedPlanets) != 0).OrderByDescending(r => r.AvailableSince).ToList();
        StateHasChanged();
    }

    private static string GetPlanetStyle(Planet planet)
    {
        return $"width: 18px; height: 18px; font-size: 0.8rem; text-align: center; margin: 0px 0px; "+
               $"padding: 1px 0 0 0 !important; color: white; background-color: {ColorTranslator.ToHtml(planet.GetPlanetColor())}";
    }
    
    private string ColorStat(Resource resource, ushort stat)
    {
        var style = "border-right: 1px solid lightgrey; text-align: center";

        var isDarkMode = ThemeProvider.IsDarkMode;
        if (stat >= 960)
        {
            var c = isDarkMode ? Colors.Red.Darken4 : Colors.Red.Lighten4;
            style += $"; background-color: {c}";
        } else if (stat >= 900)
        {
            var c = isDarkMode ? Colors.Yellow.Darken4 : Colors.Yellow.Lighten4;
            style += $"; background-color: {c}";
        } else if (stat >= 800)
        {
            var c = isDarkMode ? Colors.Green.Darken4 : Colors.Green.Lighten4;
            style += $"; background-color: {c}";
        }

        return style;
    }
    
    private string CellDuration(Resource arg)
    {
        var isDarkMode = ThemeProvider.IsDarkMode;

        var d = DateTime.UtcNow - arg.AvailableSince;
        var style = "border-left: 1px solid lightgrey; border-right: 1px solid lightgrey; text-align: center; background-color: ";
        if (d.TotalDays < 5)
        {
            style += isDarkMode ? Colors.Green.Darken4 : Colors.Green.Lighten4;
        } else if (d.TotalDays < 7)
        {
            style += isDarkMode ? Colors.Yellow.Darken4 : Colors.Yellow.Lighten4;
        } else
        {
            style += isDarkMode ? Colors.Red.Darken4 : Colors.Red.Lighten4;
        }
        return style;
    }

    private object SortBy(Resource resource)
    {
        return resource.AvailableSince;
    }

    private string AgeText(Resource resource)
    {
        var elapsed = DateTime.UtcNow - resource.AvailableSince;
        if (elapsed.TotalHours < 1)
        {
            return $"{elapsed.Minutes}m";
        }
        if (elapsed.TotalDays < 1)
        {
            return $"{elapsed.Hours}h";
        }
        return $"{elapsed.Days}d";
    }

    private string MultiSelectPlanets(List<string> planets)
    {
        if (planets.Count == 12 || planets.Count == 0)
        {
            return "All Planets";
        }
        var sb = new StringBuilder();
        for (var i = 0; i < planets.Count; i++)
        {
            var planet = planets[i];
            sb.Append(planet.Substring(0, 3));

            if (i < planets.Count - 1)
            {
                sb.Append(", ");
            }
        }

        return sb.ToString();
    }

    private void OnSelectPlanetsChanged(IEnumerable<Planet> planets)
    {
        var p = planets.Aggregate(Planet.Undefined, (current, planet) => current | planet);
        if (p == Planet.Undefined)
        {
            p.AllPlanets();
        }

        _selectedPlanets = p;
        UpdateResources();
    }

    private bool ResourceQuickFilter(Resource resource)
    {
        if (string.IsNullOrWhiteSpace(_searchString))
        {
            return true;
        }

        if (resource.Name.Contains(_searchString, StringComparison.OrdinalIgnoreCase))
        {
            return true;
        }

        if (resource.Category.Name.Contains(_searchString, StringComparison.OrdinalIgnoreCase))
        {
            return true;
        }

        return false;
    }

}