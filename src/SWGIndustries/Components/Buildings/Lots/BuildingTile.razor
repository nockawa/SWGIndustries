@using System.Text
@using Microsoft.Extensions.Primitives
@using SWGIndustries.Data
@using SWGIndustries.Components.Misc
@using SWGIndustries.Services
@using SWGIndustries.Components.Buildings.Inventory

@inject DefinitionService DefinitionService

<MudPaper Elevation="@_elevation" Class="mud-width-full" Height="@GetTileHeight()"
          @onmouseover="OnMouseOver" @onmouseout="OnMouseOut">
    
    <MudStack Justify="Justify.FlexStart" StretchItems="StretchItems.End" AlignItems="AlignItems.Start" Spacing="0" 
              Style="height: 100%">
        <MudStack Row="true" Spacing="0" Justify="Justify.FlexStart" StretchItems="StretchItems.Start"
                  AlignItems="AlignItems.Start" Style="height: 24px; width: 100%">
            
            <MudText Typo="Typo.caption" Align="Align.Left" Class="my-1 ml-1" Style="white-space: nowrap; overflow: hidden; text-overflow: ellipsis;">@Building?.Name</MudText>
            
            @if (_mouseOver)
            {
                <MudIconButton Icon="@Icons.Material.Filled.MoreHoriz" Size="Size.Small"/>
            }
            
        </MudStack>
        
        <MudStack Spacing="0" Style="height: 100%; width: calc(100% - 16px);" Class="ma-2">
            @if (Building.FullClass.StartsWith(StructureClasses.Harvester))
            {
                if (_resource != null)
                {
                    <MudText Typo="Typo.caption" Style="white-space: nowrap; overflow: hidden; text-overflow: ellipsis;">
                        @(Building.IsRunning ? "Harvesting" : "Idle")
                        <MudLink Style="white-space: nowrap; overflow: hidden; text-overflow: ellipsis;"
                                 Typo="Typo.caption" Href="@($"/Resources/Resource?id={_resource.Id}")">@(_resource.Name)</MudLink>
                    </MudText>
                }
                <HarvesterStatus Harvester="@Building" Size="Size.Large" DisplayInfoInBar="true" />
            }
        </MudStack>

        <MudStack Row="true" Spacing="0" Justify="Justify.FlexStart" StretchItems="StretchItems.None" AlignItems="AlignItems.Center"
                  Style="height: 30px; width: 100%; ">
            
            @if (Building != null && Building.PutDownPlanet != Planet.Undefined)
            {
                <MudTooltip Text=@Building.PutDownPlanet.GetFriendlyName() openDelay="500" Placement="Placement.Top" Arrow="true">
                    <PlanetIcon Planet="@Building.PutDownPlanet" Size="PlanetIcon.IconSize.Medium" Class="ma-1"/>
                </MudTooltip>
            }
            <MudText Typo="Typo.caption" Class="mt-1" Style="white-space: nowrap; overflow: hidden; text-overflow: ellipsis">@($"{Building.PutDownBy.Name}, {DefinitionService.GetNodeByClass(Building.FullClass).Class}")</MudText>

            @if (Building?.BuildingForCrew ?? false)
            {
                <MudTooltip Text="Building is for crew" openDelay="500" Placement="Placement.Top" Arrow="true">
                    <MudAvatar Size="Size.Small" Class="mx-1 mt-1" Color="Color.Info">
                        <MudIcon Size="Size.Small" Icon="@Icons.Material.Filled.Groups"></MudIcon>
                    </MudAvatar>
                </MudTooltip>
            }

            @if (Building?.Cluster != null)
            {
                <MudTooltip Text="@($"Building is part of cluster {Building.Cluster.Name}")" openDelay="500" Placement="Placement.Top" Arrow="true">
                    <MudLink Href="@($"/Resources/Cluster?id={Building.Cluster.Id}")">
                        <MudAvatar Size="Size.Small" Class="mr-1 mt-1" Color="Color.Secondary">
                            <MudIcon Size="Size.Small" Icon="@Icons.Material.Filled.Hive"></MudIcon>
                        </MudAvatar>
                    </MudLink>
                </MudTooltip>
            }

        </MudStack>

    </MudStack>
    
</MudPaper>

@code {
    [Parameter] public BuildingEntity Building { get; set; }
    [Parameter] public TileSize TileSize { get; set; }

    private int _elevation = 4;
    private bool _mouseOver;
    private ResourceEntity _resource;

    private string GetTileHeight() => TileSize == TileSize.Large ? "20rem" : "10rem";

    protected override void OnInitialized()
    {
        if (Building != null)
        {
            // Harvester
            if (Building.FullClass.StartsWith(StructureClasses.Harvester))
            {
                _resource = (Building.Cluster != null) ? Building.Cluster.Resource : Building.HarvestingResource;
            }
        }
    }

    private void OnMouseOver()
    {
        _mouseOver = true;
        _elevation = 10;
    }

    private void OnMouseOut()
    {
        _mouseOver = false;
        _elevation = 4;
    }
}