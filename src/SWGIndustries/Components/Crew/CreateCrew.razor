@using SWGIndustries.Data
@using SWGIndustries.Services

@inject UserService UserService
@inject ISnackbar Snackbar
@inject DataAccessService DataAccessService

<MudPaper Class="pa-4" Style="width: 50%">
    <MudText Typo="Typo.h6" Class="mb-4">Create a crew</MudText>
    <MudForm @bind-IsValid="@_formSuccess">
        
        <MudTextField T="string" @bind-Value="_crewName" Label="Name of the crew" Variant="Variant.Outlined"
                      Required="true" AutoFocus="true" Immediate="true" DebounceInterval="100"
                      Validation="@(async (string t) => await ValidateCrewName(t))" />
        
        <div class="d-flex justify-end mt-2">
            <MudButton Variant="Variant.Filled" Color="Color.Secondary" Class="mr-2"
                       OnClick="@(() => OnCrewCreated?.Invoke(null))">Cancel</MudButton>
            <MudButton Variant="Variant.Filled" Color="Color.Primary" Disabled="@(!_formSuccess)"
                       OnClick="OnCreateCrew">Create</MudButton>
        </div>
    </MudForm>
</MudPaper>

@code {
    private bool _formSuccess;
    private AppAccountEntity _appAccount;
    private string _crewName;
    
    [Parameter] public Action<CrewEntity> OnCrewCreated { get; set; }

    protected override async Task OnInitializedAsync()
    {
        _appAccount = await DataAccessService.GetAppAccountAsync();
    }

    private async Task<string> ValidateCrewName(string text)
    {
        if (string.IsNullOrEmpty(text) || text.StartsWith(" ") || text.EndsWith(" ") || text.Length >= CrewEntity.CrewNameMaxLength)
        {
            return "Invalid name or empty name.";
        }
        
        if (text.Length < 5)
        {
            return "Crew name must be at least 5 characters long.";
        }
        
        if (text.Length >= CrewEntity.CrewNameMaxLength)
        {
            return $"Crew name length is exceeding the limit of {CrewEntity.CrewNameMaxLength} characters.";
        }

        if (await DataAccessService.GetCrewByName(text, true) != null)
        {
            return "A crew with this name already exists.";
        }

        return null;
    }

    private async Task OnCreateCrew()
    {
        var (res, info) = await DataAccessService.CreateCrew(_appAccount, _crewName);
        Snackbar.Add(info, res != null ? Severity.Success : Severity.Error);

        OnCrewCreated?.Invoke(res);
        _crewName = null;
    }

}