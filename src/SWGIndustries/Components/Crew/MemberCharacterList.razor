@using SWGIndustries.Data
@using SWGIndustries.Services

@inject ISnackbar Snackbar
@inject DataAccessService DataAccessService
@inject IDialogService DialogService

<!--suppress CssUnresolvedCustomProperty -->
<style>
    .mud-table-cell-custom-group {
        font-weight: 500;
    }
    .mud-table-head .mud-table-cell {
        background-color: var(--mud-palette-primary);
    }
</style>

<MudPaper Elevation="2" Class="ma-4 pa-4">
    <MudTable T="SWGCharacter" GroupBy="_groupDefinition" Dense="true" Items="_characters" Elevation="0" Hover="true"
              GroupHeaderStyle="background-color:var(--mud-palette-background-gray);">
        <ColGroup>
            <col style="width: 2rem;"/>
            <col/>
            <col style="width: 4rem;"/>
            <col style="width: 4rem;"/>
            <col style="width: 6rem;"/>
        </ColGroup>
        <HeaderContent>
            <MudTh Style="color: var(--mud-palette-primary-text)">Character</MudTh>
            <MudTh Style="color: var(--mud-palette-primary-text)">Lots</MudTh>
            <MudTh Style="color: var(--mud-palette-primary-text)">Member</MudTh>
            <MudTh Style="color: var(--mud-palette-primary-text); text-align: center">Actions</MudTh>
        </HeaderContent>
        <GroupHeaderTemplate>
            <MudTh Class="mud-table-cell-custom-group pa-2" colspan="4">@(((SWGAccount)context.Key).Name)</MudTh>
        </GroupHeaderTemplate>
        <RowTemplate>
            <MudTd DataLabel="Name">@context.Name</MudTd>
            <MudTd DataLabel="Lots">@($"{context.PutDownBuildings.Count}/{context.MaxLotsForCrew}")</MudTd>
            <MudTd DataLabel="Member" Style="text-align: center;">
                @if (context.IsCrewMember)
                {
                    <MudTooltip Text="Is a member of the crew" openDelay="500" Placement="Placement.Top" Arrow="true">
                        <MudIcon Icon="@Icons.Material.Filled.Check" Size="Size.Small"></MudIcon>
                    </MudTooltip>
                }
                else
                {
                    <MudTooltip Text="Not a member" openDelay="500" Placement="Placement.Top" Arrow="true">
                        <MudIcon Icon="@Icons.Material.Filled.Block" Size="Size.Small"></MudIcon>
                    </MudTooltip>
                }
            </MudTd>
            <MudTd DataLabel="Actions" Style="text-align: center">
                @if (context.IsCrewMember == false)
                {
                    <MudTooltip Text="Add character as member of the crew" openDelay="500" Placement="Placement.Top" Arrow="true">
                        <MudIconButton Icon="@Icons.Material.Filled.PersonAdd" Color="Color.Primary" Size="Size.Small"
                                       OnClick="@(async ()=> await AddCharacterToCrew(context, true))"/>
                    </MudTooltip>
                }
                else
                {
                    <MudTooltip Text="Change the maximum number of lots to lend" openDelay="500" Placement="Placement.Top" Arrow="true">
                        <MudIconButton Icon="@Icons.Material.Filled.DashboardCustomize" Color="Color.Primary" Size="Size.Small"
                                       OnClick="@(async ()=> await AddCharacterToCrew(context, false))"/>
                    </MudTooltip>
                    <MudTooltip Text="Remove character from crew, only possible if your character no longer lends slots to the crew" openDelay="500" Placement="Placement.Top" Arrow="true">
                        <MudIconButton Icon="@Icons.Material.Filled.PersonRemove" Color="Color.Error" Size="Size.Small" 
                                       Disabled="@(CanRemoveCharacter(context)==false)" 
                                       OnClick="@(async ()=> await RemoveCharacterFromCrew(context))"/>
                    </MudTooltip>
                }
            </MudTd>
        </RowTemplate>
        
    </MudTable>
</MudPaper>

@code {
    [Parameter] public ApplicationUser User { get; set; }
    [Parameter] public Action OnCrewListChanged { get; set; }

    private TableGroupDefinition<SWGCharacter> _groupDefinition = new()
    {
        GroupName = "Account",
        Indentation = true,
        Expandable = true,
        Selector = e => e.SWGAccount,
    };

    private IList<SWGCharacter> _characters;

    protected override async Task OnParametersSetAsync()
    {
        await RefreshCharacters();
    }
    
    public async Task RefreshCharacters()
    {
        _characters = await DataAccessService.GetUserCharacters(User);
        StateHasChanged();
    }

    private bool CanRemoveCharacter(SWGCharacter character)
    {
        // TODO
        return true;
    }

    private async Task<bool> RemoveCharacterFromCrew(SWGCharacter character)
    {
        if (await DialogService.ShowMessageBox("Warning", $"Are you sure you want to remove '{character.Name}' from the screw?", 
                yesText: "Remove", cancelText: "Cancel") != true)
        {
            return false;
        }

        var (res, info) = await DataAccessService.RemoveCharacterFromCrew(character);
        Snackbar.Add(info, res ? Severity.Success : Severity.Error);
        await RefreshCharacters();
        OnCrewListChanged?.Invoke();
        
        return res;
    }

    private async Task<bool> AddCharacterToCrew(SWGCharacter character, bool addOrChangeLot)
    {
        var options = new DialogOptions()
        {
            BackdropClick = false,
            CloseButton = false,
        };

        var title = addOrChangeLot ? "Add character to crew" : "Change lots to lend";
        var dialog = await DialogService.ShowAsync<AddCharacterToCrewDialog>(title, options);
        var result = await dialog.Result;

        if (result == null || result.Canceled)
        {
            return false;
        }
        
        var lotToLend = ((AddCharacterToCrewDialog)dialog.Dialog)!.LendLotCount;
        var (res, info) = addOrChangeLot ? 
            await DataAccessService.AddCharacterToCrew(character, lotToLend) : 
            await DataAccessService.SetCharacterMaxLotToLend(character, lotToLend);
        
        Snackbar.Add(info, res ? Severity.Success : Severity.Error);
        await RefreshCharacters();
        OnCrewListChanged?.Invoke();
        return res;
    }
}