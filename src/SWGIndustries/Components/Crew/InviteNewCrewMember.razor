@using SWGIndustries.Data
@using SWGIndustries.Services

@inject UserService UserService
@inject ISnackbar Snackbar
@inject AdminService AdminService

<MudPaper Class="pa-4 mt-4" Style="width: 50%">
    <MudText Typo="Typo.h6" Class="mb-4">Invite a user to join your crew</MudText>
    <MudForm @bind-IsValid="@_formSuccess">

        <MudAutocomplete T="AppAccountEntity" @bind-Value="_newMember" Variant="Variant.Filled" AutoFocus="true" ToStringFunc="a => a?.Name ?? string.Empty"
                         DebounceInterval="500" Immediate="true" SearchFunc="async (text, ct) => await SearchFunc(text, ct)"
                         Label="Name of the SWG Industries account of the user to invite"/>
        
        <div class="d-flex justify-end mt-2">
            <MudButton Variant="Variant.Filled" Color="Color.Secondary" Class="mr-2"
                       OnClick="@(() => OnCrewInvitationSent?.Invoke(null))">Cancel</MudButton>
            <MudButton Variant="Variant.Filled" Color="Color.Primary" Disabled="@(!_formSuccess)"
                       OnClick="CreateAndSendInvitation">Send invitation</MudButton>
        </div>
    </MudForm>
</MudPaper>

@code {
    [Parameter] public AppAccountEntity CrewLeader { get; set; }
    [Parameter] public Action<AppAccountEntity> OnCrewInvitationSent { get; set; }

    private AppAccountEntity _newMember;
    private bool _formSuccess;

    private void CreateAndSendInvitation()
    {
        OnCrewInvitationSent?.Invoke(_newMember);
    }

    private async Task<IEnumerable<AppAccountEntity>> SearchFunc(string text, CancellationToken ct)
    {
        return await AdminService.GetAppAccountsByName(text, true, ct);
    }

}