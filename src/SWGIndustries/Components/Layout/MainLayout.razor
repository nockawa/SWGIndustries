@using SWGIndustries.Services
@inherits LayoutComponentBase
@inject NavigationManager NavMgr
@inject UserManager UserManager


@* Required *@
<MudThemeProvider Theme="@_theme" IsDarkMode="_isDarkMode" />
<MudPopoverProvider />

@* Needed for dialogs *@
<MudDialogProvider />

@* Needed for snackbars *@
<MudSnackbarProvider />
<MudLayout>
    <MudAppBar Elevation="1">
        <MudIconButton Icon="@Icons.Material.Filled.Menu" Color="Color.Inherit" Edge="Edge.Start" OnClick="@((e) => DrawerToggle())" />
        <MudText Typo="Typo.h5" Class="ml-3">SWG Industries</MudText>

        <MudSpacer />
        
        <AuthorizeView>
            <Authorized>
                <MudLink Href="Account/Manage">
                    @context.User.Identity?.Name
                </MudLink>
                @if (ExternalUserInfo != null && ExternalUserInfo.AvatarUrl != null)
                {
                    <MudLink Href="Account/Manage">
                        <MudAvatar Href="Account/Manage" Class="ml-3">
                            <MudImage Src="@ExternalUserInfo.AvatarUrl" referrerPolicy="no-referrer"></MudImage>
                        </MudAvatar>
                    </MudLink>
                }
                <MudLink Class="ml-3" Href="Account/Logout">LogOut</MudLink>
            </Authorized>
            <NotAuthorized>
                <MudLink Href="@($"Account/Login?ReturnUrl={ReturnUrl}")">Login</MudLink>
            </NotAuthorized>
        </AuthorizeView>

        <MudIconButton Icon="@(DarkLightModeButtonIcon)" Color="Color.Inherit" OnClick="@DarkModeToggle" />
        <MudIconButton Icon="@Icons.Material.Filled.MoreVert" Color="Color.Inherit" Edge="Edge.End" />
    </MudAppBar>
    <MudDrawer id="nav-drawer" @bind-Open="_drawerOpen" ClipMode="DrawerClipMode.Always" Elevation="2">
        <NavMenu />
    </MudDrawer>
    <MudMainContent Class="mt-16 pa-4">
        @Body
    </MudMainContent>
</MudLayout>


<div id="blazor-error-ui" data-nosnippet>
    An unhandled error has occurred.
    <a href="." class="reload">Reload</a>
    <span class="dismiss">🗙</span>
</div>

@*
<div class="page">
    <div class="sidebar">
        <NavMenu/>
    </div>

    <main>
        <div class="top-row px-1">
            <a href="https://docs.microsoft.com/en-us/aspnet/" target="_blank">About</a>
            <AuthorizeView>
                <Authorized>
                    <a href="Account/Manage">
                        @context.User.Identity?.Name
                        @if (ExternalUserInfo != null && ExternalUserInfo.AvatarUrl != null)
                        {
                            <img src="@ExternalUserInfo.AvatarUrl" referrerPolicy="no-referrer" width="40" height="40" alt="Avatar Picture" style="border-radius: 50%; margin-left: 0.5rem"/>
                        }
                    </a>
                    <a href="Account/Logout">LogOut</a>
                </Authorized>
                <NotAuthorized>
                    <a class="nav-link" href="Account/Login?ReturnUrl=@ReturnUrl">Login</a>
                </NotAuthorized>
            </AuthorizeView>
        </div>
        <div class="content px-4">
            @Body
        </div>
    </main>
</div>


*@

@code
{
    private string ReturnUrl { get; set; }
    private ExternalUserInfo ExternalUserInfo { get; set; }
    bool _drawerOpen = true;
    private bool _isDarkMode = true;
    private MudTheme _theme = null;

    void DrawerToggle()
    {
        _drawerOpen = !_drawerOpen;
    }
    
    private void DarkModeToggle()
    {
        _isDarkMode = !_isDarkMode;
    }

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        
        _theme = new()
        {
            PaletteLight = _lightPalette,
            PaletteDark = _darkPalette,
            LayoutProperties = new LayoutProperties()
        };
        
        ReturnUrl = NavMgr.ToBaseRelativePath(NavMgr.Uri);
        if (ReturnUrl == "") 
        {
            ReturnUrl = "/";
        }

        ExternalUserInfo = await UserManager.GetExternalUserInfo();
    }
    private readonly PaletteLight _lightPalette = new()
    {
        Black = "#110e2d",
        AppbarText = "#424242",
        AppbarBackground = "rgba(255,255,255,0.8)",
        DrawerBackground = "#ffffff",
        GrayLight = "#e8e8e8",
        GrayLighter = "#f9f9f9",
    };

    private readonly PaletteDark _darkPalette = new()
    {
        Primary = "#7e6fff",
        Surface = "#1e1e2d",
        Background = "#1a1a27",
        BackgroundGray = "#151521",
        AppbarText = "#92929f",
        AppbarBackground = "rgba(26,26,39,0.8)",
        DrawerBackground = "#1a1a27",
        ActionDefault = "#74718e",
        ActionDisabled = "#9999994d",
        ActionDisabledBackground = "#605f6d4d",
        TextPrimary = "#b2b0bf",
        TextSecondary = "#92929f",
        TextDisabled = "#ffffff33",
        DrawerIcon = "#92929f",
        DrawerText = "#92929f",
        GrayLight = "#2a2833",
        GrayLighter = "#1e1e2d",
        Info = "#4a86ff",
        Success = "#3dcb6c",
        Warning = "#ffb545",
        Error = "#ff3f5f",
        LinesDefault = "#33323e",
        TableLines = "#33323e",
        Divider = "#292838",
        OverlayLight = "#1e1e2d80",
    };

    public string DarkLightModeButtonIcon => _isDarkMode switch
    {
        true => Icons.Material.Rounded.AutoMode,
        false => Icons.Material.Outlined.DarkMode,
    };
}
