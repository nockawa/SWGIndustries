@using SWGIndustries.Data
@using SWGIndustries.Services
@inherits LayoutComponentBase
@inject NavigationManager NavMgr
@inject UserService UserService

@* Required *@
<MudThemeProvider Theme="@_theme" @bind-IsDarkMode="@_isDarkMode" @ref="@_themeProvider"/>
<MudPopoverProvider />

@* Needed for dialogs *@
<MudDialogProvider />

@* Needed for snackbars *@
<MudSnackbarProvider />
<MudLayout>
    <MudAppBar Elevation="1">
        <MudIconButton Icon="@Icons.Material.Filled.Menu" Color="Color.Inherit" Edge="Edge.Start" OnClick="@((e) => DrawerToggle())" />
        <MudText Typo="Typo.h5" Class="ml-3">SWG Industries</MudText>

        <MudSpacer />
        
        <AuthorizeView>
            <Authorized>
                <MudLink Href="Account/Manage">
                    @context.User.Identity?.Name
                </MudLink>
                @if (UserInfo != null && UserInfo.AvatarUrl != null)
                {
                    <MudLink href="Account/Manage">
                        <MudAvatar href="Account/Manage" Class="ml-3">
                            <MudImage Src="@UserInfo.AvatarUrl" referrerPolicy="no-referrer"></MudImage>
                        </MudAvatar>
                    </MudLink>
                }
                <MudLink Class="mx-3" Href="Account/Logout">LogOut</MudLink>
            </Authorized>
            <NotAuthorized>
                <MudLink Href="@($"Account/Login?ReturnUrl={ReturnUrl}")">Login</MudLink>
            </NotAuthorized>
        </AuthorizeView>

        <MudIconButton Icon="@DarkLightModeButtonIcon()" Color="Color.Inherit" OnClick="@ThemeModeCycle" />
        <MudIconButton Icon="@Icons.Material.Filled.MoreVert" Color="Color.Inherit" Edge="Edge.End" />
    </MudAppBar>
    <MudDrawer id="nav-drawer" Variant="DrawerVariant.Persistent" @bind-Open="_drawerOpen" 
               ClipMode="DrawerClipMode.Always" Elevation="2" Class="py-4">
        <NavMenu />
    </MudDrawer>
    <MudMainContent Class="mt-16 pa-4">
        @Body
    </MudMainContent>
</MudLayout>


<div id="blazor-error-ui" data-nosnippet>
    An unhandled error has occurred.
    <a href="." class="reload">Reload</a>
    <span class="dismiss">🗙</span>
</div>

@code
{
    private MudThemeProvider _themeProvider;
    private ThemeMode _themeMode = ThemeMode.Auto;
    private MudTheme _theme = null;
    private bool _isDarkMode;
    private bool _systemDarkMode;

    private string ReturnUrl { get; set; }
    private UserInfo UserInfo { get; set; }
    bool _drawerOpen = true;

    void DrawerToggle()
    {
        _drawerOpen = !_drawerOpen;
    }
    
    private void ThemeModeCycle()
    {
        _themeMode = (ThemeMode)(((int)_themeMode + 1) % 3);
        switch (_themeMode)
        {
            case ThemeMode.Auto:
                _isDarkMode = _systemDarkMode;
                break;
            case ThemeMode.Dark:
                _isDarkMode = true;
                break;
            case ThemeMode.Light:
                _isDarkMode = false;
                break;
        }

        UserInfo.ThemeMode = _themeMode;
    }

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        
        _theme = new()
        {
            PaletteLight = _lightPalette,
            PaletteDark = _darkPalette,
            LayoutProperties = new LayoutProperties()
        };
        
        var userInfo = await UserService.GetUserInfo();
        _themeMode = userInfo.ThemeMode;
        _isDarkMode = (_themeMode == ThemeMode.Auto) ? _systemDarkMode : _themeMode == ThemeMode.Dark;

        ReturnUrl = NavMgr.ToBaseRelativePath(NavMgr.Uri);
        if (ReturnUrl == "") 
        {
            ReturnUrl = "/";
        }

        UserInfo = await UserService.GetUserInfo();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            _systemDarkMode = await _themeProvider.GetSystemPreference();
            _isDarkMode = (_themeMode == ThemeMode.Auto) ? _systemDarkMode : _themeMode == ThemeMode.Dark;
            await _themeProvider.WatchSystemPreference(dark =>
            {
                _systemDarkMode = dark;
                StateHasChanged();
                return Task.CompletedTask;
            });
            StateHasChanged();
        }
    }

    private readonly PaletteLight _lightPalette = new()
    {
        Black = "#110e2d",
        AppbarText = "#424242",
        AppbarBackground = "rgba(255,255,255,0.8)",
        DrawerBackground = "#ffffff",
        GrayLight = "#e8e8e8",
        GrayLighter = "#f9f9f9",
    };

    private readonly PaletteDark _darkPalette = new()
    {
        Primary = "#7e6fff",
        Surface = "#1e1e2d",
        Background = "#1a1a27",
        BackgroundGray = "#151521",
        AppbarText = "#92929f",
        AppbarBackground = "rgba(26,26,39,0.8)",
        DrawerBackground = "#1a1a27",
        ActionDefault = "#74718e",
        ActionDisabled = "#9999994d",
        ActionDisabledBackground = "#605f6d4d",
        TextPrimary = "#b2b0bf",
        TextSecondary = "#92929f",
        TextDisabled = "#ffffff33",
        DrawerIcon = "#92929f",
        DrawerText = "#92929f",
        GrayLight = "#2a2833",
        GrayLighter = "#1e1e2d",
        Info = "#4a86ff",
        Success = "#3dcb6c",
        Warning = "#ffb545",
        Error = "#ff3f5f",
        LinesDefault = "#33323e",
        TableLines = "#33323e",
        Divider = "#292838",
        OverlayLight = "#1e1e2d80",
    };

    private string DarkLightModeButtonIcon()
    {
        switch (_themeMode)
        {
            case ThemeMode.Auto:
                return Icons.Material.Outlined.LightMode;
            case ThemeMode.Light:
                return Icons.Material.Outlined.DarkMode;
            case ThemeMode.Dark:
                return Icons.Material.Outlined.AutoMode;
        }
        return null;
    }
}
